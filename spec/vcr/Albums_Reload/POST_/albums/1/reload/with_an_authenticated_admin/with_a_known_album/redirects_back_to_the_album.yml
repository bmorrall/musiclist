---
http_interactions:
- request:
    method: get
    uri: http://ws.audioscrobbler.com/2.0/?album=White%20Album&api_key=<LASTFM_API_KEY>&artist=The%20Beatles&method=album.getInfo
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - openresty/1.9.15.1
      Date:
      - Fri, 14 Aug 2020 02:09:52 GMT
      Content-Type:
      - text/xml; charset=UTF-8
      Connection:
      - keep-alive
      Cteonnt-Length:
      - '37209'
      Access-Control-Allow-Methods:
      - POST, GET, OPTIONS
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Max-Age:
      - '86400'
      Cache-Control:
      - private
      Content-Length:
      - '14896'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Fri, 14 Aug 2020 02:09:52 GMT
recorded_with: VCR 6.0.0
